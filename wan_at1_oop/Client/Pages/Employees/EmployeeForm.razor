@inject HttpClient http 
<h5 style="padding-left:40%;" class="mt-2">@Title</h5>

<EditForm Model="@Employee" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <div>
        <div class="form-row">
            <div class="col-12">
                <div class="form-group">
                    <label>
                        Name:
                        <InputText @bind-Value="@Employee.EmployeeName"
                                   class="form-control"
                                   placeholder="e.g. John" />
                    </label>
                    <span class="errorMsg">
                        <ValidationMessage For="@(() => Employee.EmployeeName)" />
                    </span>
                </div>
            </div>
        </div>
        <div class="form-row">
            <div class="col-8">
                <label>
                    Branch:
                    <CustomInputSelect @bind-Value="@Employee.BranchId"
                                       class="form-control">
                        @if (branches == null)
                        {
                            <text>Loading...</text>
                        }
                        else
                        {
                            @foreach (var branch in branches)
                            {
                                <option value="@branch.BranchId">@branch.Location</option>
                            }
                        }
                    </CustomInputSelect>
                </label>
                <ValidationMessage For="@(() => Employee.BranchId)" />
            </div>
            <div class="col-4">
                <label>
                    Rate /hr
                    <InputNumber @bind-Value="@Employee.RatePerHour"
                                 class="form-control"
                                 placeholder="e.g. 12.99" />
                </label>
                <ValidationMessage For="@(() => Employee.RatePerHour)" />
            </div>
        </div>

        <div class="form-row">
            <div class="col-8">
                <label>
                    Position:
                    <br />
                    <CustomInputSelect @bind-Value="@Employee.PositionId" disabled="@isEdit">
                        @if (branches == null)
                        {
                            <text>Loading...</text>
                        }
                        else
                        {
                            @foreach (var position in positions)
                            {
                                <option value="@position.PositionId" @onclick="@changeDefaultValue">@position.PositionType</option>
                            }
                        }
                    </CustomInputSelect>
                </label>
                <ValidationMessage For="@(() => Employee.PositionId)" />
            </div>
        </div>

        <div class="form-row">
            <div class="col-7">
                <label>
                    Reg. No
                    <InputText @bind-Value="@Employee.Registration"
                               class="form-control"
                               placeholder="e.g. 000001" />
                </label>
                <ValidationMessage For="@(() => Employee.Registration)" />
            </div>
            <div class="col-5">
                <label>
                    Expiry Date:
                    <InputText @bind-Value="@Employee.ExpiryDate"
                               class="form-control"
                               placeholder="dd/mm/yyyy" />
                </label>
                <ValidationMessage For="@(() => Employee.ExpiryDate)" />
            </div>
        </div>
        <button type="submit" class="btn btn-success mt-2 d-block" style="width: 100%;">
            @ButtonText
        </button>
    </div>

</EditForm>

@code {
    [Parameter] public Technician Employee { get; set; }
    [Parameter] public string ButtonText { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public bool isEdit { get; set; }

    Position[] positions { get; set; }
    Branch[] branches { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await GetAllPositions();
        await GetAllBranches();
    }

    async Task GetAllPositions()
    {
        positions = await http.GetFromJsonAsync<Position[]>("api/positions");
    }

    async Task GetAllBranches()
    {
        branches = await http.GetFromJsonAsync<Branch[]>("api/branches");
    }

    public void changeDefaultValue()
    {

        if(Employee.PositionId == 2)
        {
            Employee.ExpiryDate = "N/A";
            if(String.IsNullOrEmpty(Employee.Registration) || !Employee.Registration.StartsWith("AC"))
            {
                Employee.Registration = "AC";
            }
        } else if(Employee.PositionId == 1)
        {
            if(Employee.ExpiryDate == "N/A")
            {
                Employee.ExpiryDate = "";
            }

            if (!String.IsNullOrEmpty(Employee.Registration) && Employee.Registration.StartsWith("AC"))
            {
                Employee.Registration = "";
            }
        }
    }
}
